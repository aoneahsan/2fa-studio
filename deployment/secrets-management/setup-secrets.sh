#!/bin/bash

# 2FA Studio - Production Secrets Setup Script
# This script sets up all required secrets for production deployment

set -e

echo "🔐 2FA Studio - Production Secrets Setup"
echo "=========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if running in production
if [[ "$NODE_ENV" != "production" && "$1" != "--force" ]]; then
    echo -e "${YELLOW}⚠️  Warning: Not in production environment. Use --force to override.${NC}"
    exit 1
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check required tools
echo -e "${BLUE}🔍 Checking required tools...${NC}"

if ! command_exists firebase; then
    echo -e "${RED}❌ Firebase CLI not found. Please install: npm install -g firebase-tools${NC}"
    exit 1
fi

if ! command_exists gcloud; then
    echo -e "${RED}❌ Google Cloud CLI not found. Please install gcloud${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Required tools found${NC}"

# Get project configuration
read -p "Enter your Firebase project ID: " FIREBASE_PROJECT_ID
read -p "Enter your Google Cloud project ID (if different): " GCLOUD_PROJECT_ID

# Use Firebase project ID as default for GCloud if not provided
if [[ -z "$GCLOUD_PROJECT_ID" ]]; then
    GCLOUD_PROJECT_ID="$FIREBASE_PROJECT_ID"
fi

echo -e "${BLUE}📋 Project Configuration:${NC}"
echo "Firebase Project ID: $FIREBASE_PROJECT_ID"
echo "Google Cloud Project ID: $GCLOUD_PROJECT_ID"

# Confirm before proceeding
read -p "Continue with secrets setup? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Setup cancelled."
    exit 1
fi

# Set Firebase project
echo -e "${BLUE}🔧 Setting Firebase project...${NC}"
firebase use "$FIREBASE_PROJECT_ID"

# Set Google Cloud project
echo -e "${BLUE}🔧 Setting Google Cloud project...${NC}"
gcloud config set project "$GCLOUD_PROJECT_ID"

# Create secrets in Google Secret Manager
echo -e "${BLUE}🔐 Creating secrets in Google Secret Manager...${NC}"

# Database secrets
gcloud secrets create firebase-api-key --replication-policy="automatic" || true
gcloud secrets create firebase-service-account --replication-policy="automatic" || true

# Third-party API secrets
gcloud secrets create google-drive-api-key --replication-policy="automatic" || true
gcloud secrets create stripe-secret-key --replication-policy="automatic" || true
gcloud secrets create stripe-webhook-secret --replication-policy="automatic" || true
gcloud secrets create onesignal-rest-api-key --replication-policy="automatic" || true

# Monitoring secrets
gcloud secrets create sentry-dsn --replication-policy="automatic" || true
gcloud secrets create mixpanel-token --replication-policy="automatic" || true

# Encryption secrets
gcloud secrets create encryption-master-key --replication-policy="automatic" || true
gcloud secrets create jwt-secret --replication-policy="automatic" || true

# Social auth secrets
gcloud secrets create google-oauth-client-secret --replication-policy="automatic" || true
gcloud secrets create facebook-app-secret --replication-policy="automatic" || true
gcloud secrets create github-client-secret --replication-policy="automatic" || true
gcloud secrets create apple-key-id --replication-policy="automatic" || true
gcloud secrets create apple-team-id --replication-policy="automatic" || true
gcloud secrets create apple-private-key --replication-policy="automatic" || true

# Admin secrets
gcloud secrets create admin-email --replication-policy="automatic" || true
gcloud secrets create smtp-password --replication-policy="automatic" || true

echo -e "${GREEN}✅ Secrets created in Google Secret Manager${NC}"

# Set Firebase Functions configuration
echo -e "${BLUE}⚙️  Setting Firebase Functions configuration...${NC}"

# Get current directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
FUNCTIONS_DIR="$SCRIPT_DIR/../../functions"

# Create functions config
cat > "$FUNCTIONS_DIR/.env.production" << EOF
# This file is automatically generated by setup-secrets.sh
# Do not edit manually

# Google Cloud Configuration
GOOGLE_CLOUD_PROJECT=$GCLOUD_PROJECT_ID
FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID

# Secret Manager Configuration
USE_SECRET_MANAGER=true
SECRET_PREFIX=2fa-studio-prod

# Environment
NODE_ENV=production
FUNCTIONS_REGION=us-central1

# Rate Limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_WINDOW_MS=900000

# Security
REQUIRE_AUTH=true
CORS_ORIGIN=https://$FIREBASE_PROJECT_ID.firebaseapp.com

# Logging
LOG_LEVEL=info
ENABLE_ERROR_REPORTING=true

# Monitoring
ENABLE_PERFORMANCE_MONITORING=true
ENABLE_ANALYTICS=true
EOF

echo -e "${GREEN}✅ Firebase Functions configuration created${NC}"

# Create GitHub Actions secrets template
echo -e "${BLUE}📝 Creating GitHub Actions secrets template...${NC}"

cat > "$SCRIPT_DIR/github-secrets.md" << EOF
# GitHub Actions Secrets Setup

Add the following secrets to your GitHub repository settings:

## Firebase Deployment
- \`FIREBASE_TOKEN\`: Firebase CLI token (run: firebase login:ci)
- \`FIREBASE_PROJECT_ID\`: $FIREBASE_PROJECT_ID

## Google Cloud
- \`GCLOUD_PROJECT_ID\`: $GCLOUD_PROJECT_ID
- \`GCLOUD_SERVICE_ACCOUNT_KEY\`: Service account key JSON (base64 encoded)

## App Store Deployment
- \`APPLE_CERTIFICATE_P12\`: Apple distribution certificate (base64 encoded)
- \`APPLE_CERTIFICATE_PASSWORD\`: Certificate password
- \`APPLE_PROVISIONING_PROFILE\`: Provisioning profile (base64 encoded)
- \`APPLE_KEY_ID\`: App Store Connect API key ID
- \`APPLE_ISSUER_ID\`: App Store Connect API issuer ID
- \`APPLE_PRIVATE_KEY\`: App Store Connect API private key

## Google Play Deployment
- \`GOOGLE_PLAY_SERVICE_ACCOUNT_JSON\`: Service account JSON (base64 encoded)

## Chrome Web Store
- \`CHROME_EXTENSION_ID\`: Extension ID
- \`CHROME_CLIENT_ID\`: OAuth client ID
- \`CHROME_CLIENT_SECRET\`: OAuth client secret
- \`CHROME_REFRESH_TOKEN\`: OAuth refresh token

## Monitoring
- \`SENTRY_ORG\`: Sentry organization slug
- \`SENTRY_PROJECT\`: Sentry project slug
- \`SENTRY_AUTH_TOKEN\`: Sentry auth token

## Notifications
- \`SLACK_WEBHOOK_URL\`: Slack webhook for deployment notifications
- \`DISCORD_WEBHOOK_URL\`: Discord webhook for deployment notifications

## Security
- \`SECURITY_SCAN_TOKEN\`: Token for security scanning tools
EOF

echo -e "${GREEN}✅ GitHub Actions secrets template created at: $SCRIPT_DIR/github-secrets.md${NC}"

# Create service account for GitHub Actions
echo -e "${BLUE}👤 Creating service account for GitHub Actions...${NC}"

SERVICE_ACCOUNT_NAME="github-actions-deployer"
SERVICE_ACCOUNT_EMAIL="$SERVICE_ACCOUNT_NAME@$GCLOUD_PROJECT_ID.iam.gserviceaccount.com"

# Create service account
gcloud iam service-accounts create "$SERVICE_ACCOUNT_NAME" \
    --display-name="GitHub Actions Deployer" \
    --description="Service account for GitHub Actions CI/CD pipeline" || true

# Grant necessary roles
gcloud projects add-iam-policy-binding "$GCLOUD_PROJECT_ID" \
    --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
    --role="roles/firebase.admin"

gcloud projects add-iam-policy-binding "$GCLOUD_PROJECT_ID" \
    --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
    --role="roles/secretmanager.secretAccessor"

gcloud projects add-iam-policy-binding "$GCLOUD_PROJECT_ID" \
    --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
    --role="roles/cloudfunctions.admin"

gcloud projects add-iam-policy-binding "$GCLOUD_PROJECT_ID" \
    --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
    --role="roles/storage.admin"

# Create and download service account key
KEY_FILE="$SCRIPT_DIR/github-actions-key.json"
gcloud iam service-accounts keys create "$KEY_FILE" \
    --iam-account="$SERVICE_ACCOUNT_EMAIL"

echo -e "${GREEN}✅ Service account created: $SERVICE_ACCOUNT_EMAIL${NC}"
echo -e "${YELLOW}⚠️  Service account key saved to: $KEY_FILE${NC}"
echo -e "${YELLOW}⚠️  IMPORTANT: Upload this key to GitHub Secrets as GCLOUD_SERVICE_ACCOUNT_KEY (base64 encoded)${NC}"

# Base64 encode the key for GitHub
echo -e "${BLUE}📋 Base64 encoded key for GitHub Secrets:${NC}"
echo "GCLOUD_SERVICE_ACCOUNT_KEY="
base64 -i "$KEY_FILE"

# Clean up the key file for security
rm "$KEY_FILE"
echo -e "${GREEN}✅ Local key file cleaned up${NC}"

# Create environment validation script
cat > "$SCRIPT_DIR/validate-environment.sh" << 'EOF'
#!/bin/bash

# Environment validation script
set -e

echo "🔍 Validating production environment..."

# Check required environment variables
required_vars=(
    "FIREBASE_PROJECT_ID"
    "GCLOUD_PROJECT_ID"
)

for var in "${required_vars[@]}"; do
    if [[ -z "${!var}" ]]; then
        echo "❌ Missing required environment variable: $var"
        exit 1
    fi
done

# Check Firebase project accessibility
echo "🔥 Checking Firebase project access..."
firebase projects:list | grep -q "$FIREBASE_PROJECT_ID" || {
    echo "❌ Cannot access Firebase project: $FIREBASE_PROJECT_ID"
    exit 1
}

# Check Google Cloud project accessibility
echo "☁️  Checking Google Cloud project access..."
gcloud projects describe "$GCLOUD_PROJECT_ID" >/dev/null || {
    echo "❌ Cannot access Google Cloud project: $GCLOUD_PROJECT_ID"
    exit 1
}

# Check secrets accessibility
echo "🔐 Checking secrets access..."
secrets=(
    "firebase-api-key"
    "stripe-secret-key"
    "encryption-master-key"
)

for secret in "${secrets[@]}"; do
    gcloud secrets versions access latest --secret="$secret" >/dev/null || {
        echo "❌ Cannot access secret: $secret"
        exit 1
    }
done

echo "✅ Environment validation passed"
EOF

chmod +x "$SCRIPT_DIR/validate-environment.sh"

echo -e "${GREEN}✅ Environment validation script created${NC}"

# Final instructions
echo -e "${GREEN}🎉 Secrets setup completed!${NC}"
echo -e "${BLUE}📋 Next steps:${NC}"
echo "1. Review and update secrets in Google Secret Manager"
echo "2. Configure GitHub Actions secrets (see github-secrets.md)"
echo "3. Run validation script: ./validate-environment.sh"
echo "4. Test deployment pipeline"
echo ""
echo -e "${YELLOW}⚠️  Security reminders:${NC}"
echo "- Never commit secrets to version control"
echo "- Regularly rotate all secrets"
echo "- Monitor secret access logs"
echo "- Use least privilege principle"
echo ""
echo -e "${GREEN}✅ Setup complete!${NC}"