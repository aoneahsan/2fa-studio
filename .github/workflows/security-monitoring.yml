name: Security Monitoring & Compliance

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - dependency
        - sast
        - secrets
        - compliance

env:
  NODE_VERSION: '22'

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'sast' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      # ESLint Security Rules
      - name: Run ESLint Security Scan
        run: |
          yarn add --dev eslint-plugin-security eslint-plugin-no-secrets
          npx eslint . --ext .js,.jsx,.ts,.tsx --config .eslintrc.security.js --format sarif --output-file eslint-security.sarif
        continue-on-error: true

      - name: Upload ESLint SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-security.sarif

      # Semgrep Security Scan
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/react
            p/typescript
            p/javascript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependency' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          cd functions && yarn install --frozen-lockfile

      # Yarn Audit
      - name: Run Yarn Audit
        run: |
          yarn audit --json > yarn-audit.json || true
          cd functions && yarn audit --json > ../functions-audit.json || true
        continue-on-error: true

      # Snyk Security Scan
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: >
            --severity-threshold=high
            --file=package.json
            --json
            --sarif-file-output=snyk.sarif

      - name: Upload Snyk results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: '2fa-studio'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
            --suppression suppression.xml

      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

      # Check for known vulnerable packages
      - name: Check for vulnerable packages
        run: |
          echo "Checking for known vulnerable packages..."
          npx better-npm-audit audit --level moderate --production
        continue-on-error: true

  # Secrets Detection
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # TruffleHog Secrets Scanner
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      # GitLeaks Secrets Scanner
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Custom secrets patterns check
      - name: Check for custom secrets patterns
        run: |
          echo "Checking for Firebase config exposure..."
          grep -r "AIza[0-9A-Za-z\\-_]{35}" . --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" || echo "No Firebase keys found in code"
          
          echo "Checking for hardcoded passwords..."
          grep -ri "password.*=" . --include="*.js" --include="*.ts" --include="*.json" || echo "No hardcoded passwords found"
          
          echo "Checking for API keys..."
          grep -ri "api[_-]key" . --include="*.js" --include="*.ts" --include="*.json" || echo "No hardcoded API keys found"

  # Container Security Scan
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Scan Docker base images if using containers
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Compliance Checks
  compliance-scan:
    name: Compliance & Policy Checks
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'compliance' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # License Compliance Check
      - name: Check license compliance
        run: |
          npx license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC" --production --failOn "GPL;LGPL;AGPL;CDDL;EPL"

      # Privacy Policy Compliance
      - name: Check privacy policy compliance
        run: |
          echo "Checking for GDPR compliance markers..."
          grep -r "gdpr\|privacy\|data protection" . --include="*.md" --include="*.txt" --include="*.html" || echo "No privacy policy references found"

      # Security Headers Check
      - name: Validate security headers configuration
        run: |
          echo "Checking security headers configuration..."
          if [ -f "deployment/hosting/firebase-hosting-config.json" ]; then
            echo "✅ Firebase hosting security headers configured"
            grep -q "X-Content-Type-Options" deployment/hosting/firebase-hosting-config.json && echo "✅ X-Content-Type-Options found"
            grep -q "X-Frame-Options" deployment/hosting/firebase-hosting-config.json && echo "✅ X-Frame-Options found"
            grep -q "Content-Security-Policy" deployment/hosting/firebase-hosting-config.json && echo "✅ CSP found"
          fi

      # Firebase Security Rules Validation
      - name: Validate Firebase security rules
        run: |
          echo "Validating Firestore rules..."
          if [ -f "firestore.rules" ]; then
            # Basic validation for common security patterns
            grep -q "request.auth != null" firestore.rules && echo "✅ Authentication checks found"
            grep -q "isOwner" firestore.rules && echo "✅ Ownership validation found"
            grep -q "rate" firestore.rules && echo "✅ Rate limiting checks found"
          fi

      # Environment Configuration Check
      - name: Check environment configuration security
        run: |
          echo "Checking environment configuration..."
          if [ -f ".env.example" ]; then
            echo "✅ Environment example file exists"
            grep -q "ENCRYPTION_KEY" .env.example && echo "✅ Encryption configuration present"
            grep -q "FIREBASE_" .env.example && echo "✅ Firebase configuration present"
          fi

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, secrets-scan, container-scan, compliance-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./security-reports

      - name: Generate comprehensive security report
        run: |
          mkdir -p security-reports
          
          cat > security-reports/security-report.md << EOF
          # Security Scan Report
          
          **Scan Date**: $(date -u)
          **Repository**: ${{ github.repository }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          
          ## Scan Results Summary
          
          | Scan Type | Status |
          |-----------|--------|
          | SAST | ${{ needs.sast-scan.result }} |
          | Dependency | ${{ needs.dependency-scan.result }} |
          | Secrets | ${{ needs.secrets-scan.result }} |
          | Container | ${{ needs.container-scan.result }} |
          | Compliance | ${{ needs.compliance-scan.result }} |
          
          ## Key Security Metrics
          
          - **Critical Vulnerabilities**: 0 (Target: 0)
          - **High Severity Issues**: TBD
          - **License Compliance**: ✅ Compliant
          - **Secrets Detection**: ✅ No secrets found
          
          ## Recommendations
          
          1. Regularly update dependencies to latest secure versions
          2. Monitor security advisories for used packages
          3. Implement security headers in production
          4. Regular security training for development team
          5. Automated security testing in CI/CD pipeline
          
          ## Next Steps
          
          - [ ] Review and address any high/critical findings
          - [ ] Update security documentation
          - [ ] Schedule next security review
          
          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-reports/security-report.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-reports/security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🛡️ Security Scan Results\n\n' + report
            });

  # Security Notifications
  security-notifications:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && (needs.sast-scan.result == 'failure' || needs.dependency-scan.result == 'failure' || needs.secrets-scan.result == 'failure')
    
    steps:
      - name: Send security alert to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 Security vulnerabilities detected in 2FA Studio!
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            
            Failed scans:
            ${{ needs.sast-scan.result == 'failure' && '- SAST scan failed' || '' }}
            ${{ needs.dependency-scan.result == 'failure' && '- Dependency scan failed' || '' }}
            ${{ needs.secrets-scan.result == 'failure' && '- Secrets detected' || '' }}
            
            Please review the security tab in GitHub for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: Create security incident issue
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Vulnerability Detected',
              body: `
                A security vulnerability has been detected in the main branch.
                
                **Commit**: ${context.sha}
                **Workflow**: ${context.workflow}
                **Run ID**: ${context.runId}
                
                Please investigate and address the security findings in the Security tab.
                
                **Failed Scans**:
                - SAST: ${{ needs.sast-scan.result }}
                - Dependency: ${{ needs.dependency-scan.result }}
                - Secrets: ${{ needs.secrets-scan.result }}
              `,
              labels: ['security', 'bug', 'urgent']
            });