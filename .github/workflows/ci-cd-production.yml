name: CI/CD Production Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, closed]

env:
  NODE_VERSION: '22'
  YARN_CACHE_FOLDER: ~/.yarn/cache
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}

jobs:
  # Quality checks job
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile --prefer-offline
          cd functions && yarn install --frozen-lockfile --prefer-offline

      - name: Type checking
        run: yarn type-check

      - name: Linting
        run: yarn lint

      - name: Security audit
        run: |
          yarn audit --level moderate
          cd functions && yarn audit --level moderate

      - name: Run unit tests
        run: yarn test --coverage --reporter=verbose

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: '2fa-studio'
          path: '.'
          format: 'HTML,JSON'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality
    if: github.event.action != 'closed'
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --production=false

      - name: Load environment variables
        run: |
          if [ "${{ matrix.environment }}" = "production" ]; then
            echo "Loading production environment"
            # In production, secrets are injected via GitHub secrets
          elif [ "${{ matrix.environment }}" = "staging" ]; then
            echo "Loading staging environment"
            # Load staging environment variables
          fi

      - name: Build application
        run: |
          export NODE_ENV=production
          export VITE_APP_ENV=${{ matrix.environment }}
          export VITE_APP_VERSION=${{ github.ref_name }}
          export VITE_BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          export VITE_GIT_COMMIT=${{ github.sha }}
          yarn build
        env:
          # Firebase Configuration
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
          
          # Third-party services
          VITE_GOOGLE_DRIVE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_DRIVE_CLIENT_ID }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
          VITE_ONESIGNAL_APP_ID: ${{ secrets.VITE_ONESIGNAL_APP_ID }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}

      - name: Build Functions
        run: |
          cd functions
          yarn build

      - name: Analyze bundle size
        run: |
          npx vite-bundle-analyzer dist --mode json > bundle-analysis.json
          echo "## Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "Bundle size: $(du -sh dist | cut -f1)" >> $GITHUB_STEP_SUMMARY

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: |
            dist/
            functions/lib/
            bundle-analysis.json
          retention-days: 7

  # E2E testing job
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event.action != 'closed'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: ./

      - name: Setup Firebase Emulator
        run: |
          firebase emulators:exec --project demo-project "echo 'Emulator ready'" || firebase setup:emulators:firestore

      - name: Run E2E tests
        run: |
          firebase emulators:exec --project demo-project --only firestore,auth,storage "yarn cypress:run --config baseUrl=http://localhost:5173"
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos/

      - name: Upload E2E test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots/

  # Mobile build job
  mobile-build:
    name: Build Mobile Apps
    runs-on: macos-latest
    needs: quality
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install CocoaPods
        run: sudo gem install cocoapods

      - name: Build web app
        run: |
          export NODE_ENV=production
          export VITE_APP_ENV=production
          yarn build

      - name: Sync Capacitor
        run: |
          npx cap sync android
          npx cap sync ios

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleDebug
          ./gradlew bundleRelease

      - name: Build iOS
        run: |
          cd ios
          xcodebuild -workspace App/App.xcworkspace -scheme App -configuration Release -destination generic/platform=iOS -archivePath App.xcarchive archive CODE_SIGNING_ALLOWED=NO

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-builds
          path: |
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/bundle/release/*.aab

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-builds
          path: ios/App.xcarchive

  # Security scanning job
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Staging deployment job
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, build, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: ./

      - name: Deploy to Firebase Staging
        run: |
          firebase use staging-project-id --token "${{ secrets.FIREBASE_TOKEN }}"
          firebase deploy --only hosting,functions --token "${{ secrets.FIREBASE_TOKEN }}"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run smoke tests on staging
        run: |
          sleep 30 # Wait for deployment to be ready
          curl -f https://staging-project-id.firebaseapp.com/health || exit 1

      - name: Notify deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 2FA Studio successfully deployed to staging'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Production deployment job
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, security, mobile-build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: ./

      - name: Deploy to Firebase Production
        run: |
          firebase use ${{ secrets.FIREBASE_PROJECT_ID }} --token "${{ secrets.FIREBASE_TOKEN }}"
          firebase deploy --token "${{ secrets.FIREBASE_TOKEN }}"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Update deployment status
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"state": "success", "description": "Deployed to production", "context": "deployment/production"}' \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/**
          body: |
            🚀 Production deployment of 2FA Studio
            
            ## What's Changed
            - Deployed commit: ${{ github.sha }}
            - Environment: Production
            - Deployment time: ${{ github.event.head_commit.timestamp }}
            
            ## Verification
            - Web App: https://${{ secrets.FIREBASE_PROJECT_ID }}.firebaseapp.com
            - Health Check: ✅ Passed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify production deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🎉 2FA Studio successfully deployed to production!'
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Chrome Extension deployment
  deploy-extension:
    name: Deploy Chrome Extension
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build extension
        run: |
          cd chrome-extension
          zip -r ../2fa-studio-extension-${{ github.ref_name }}.zip .

      - name: Upload to Chrome Web Store
        uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          file-path: 2fa-studio-extension-${{ github.ref_name }}.zip
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          publish: true

      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: 2fa-studio-extension-${{ github.ref_name }}.zip

  # Cleanup job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-extension]
    if: always()
    
    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            build-staging
            build-production
          failOnError: false