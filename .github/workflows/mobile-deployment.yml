name: Mobile App Deployment

on:
  push:
    tags: [ 'mobile-v*' ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to deploy (android, ios, or both)'
        required: true
        default: 'both'
        type: choice
        options:
        - android
        - ios
        - both
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '22'
  JAVA_VERSION: '17'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # Build mobile apps
  build-mobile:
    name: Build Mobile Apps
    runs-on: macos-latest
    
    strategy:
      matrix:
        platform: 
          - ${{ (github.event.inputs.platform == 'android' && ['android']) || (github.event.inputs.platform == 'ios' && ['ios']) || (github.event.inputs.platform == 'both' && ['android', 'ios']) || ['android', 'ios'] }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build web app
        run: |
          export NODE_ENV=production
          export VITE_APP_ENV=${{ github.event.inputs.environment || 'production' }}
          export VITE_APP_VERSION=${{ github.ref_name }}
          export VITE_BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          yarn build
        env:
          # Environment variables for mobile build
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}

      # Android specific steps
      - name: Setup Java (Android)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK (Android)
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3

      - name: Sync Capacitor (Android)
        if: matrix.platform == 'android'
        run: |
          npx cap sync android
          npx cap update android

      - name: Decode Android keystore
        if: matrix.platform == 'android'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/release.keystore

      - name: Build Android APK and AAB
        if: matrix.platform == 'android'
        run: |
          cd android
          ./gradlew assembleRelease
          ./gradlew bundleRelease
        env:
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      # iOS specific steps
      - name: Setup Xcode (iOS)
        if: matrix.platform == 'ios'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install CocoaPods (iOS)
        if: matrix.platform == 'ios'
        run: sudo gem install cocoapods

      - name: Sync Capacitor (iOS)
        if: matrix.platform == 'ios'
        run: |
          npx cap sync ios
          npx cap update ios

      - name: Install iOS certificates
        if: matrix.platform == 'ios'
        run: |
          echo "${{ secrets.APPLE_CERTIFICATE_P12 }}" | base64 -d > certificate.p12
          echo "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 -d > profile.mobileprovision
          
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build iOS Archive
        if: matrix.platform == 'ios'
        run: |
          cd ios
          xcodebuild -workspace App/App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath App.xcarchive \
            archive

      - name: Export iOS IPA
        if: matrix.platform == 'ios'
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath App.xcarchive \
            -exportPath . \
            -exportOptionsPlist ExportOptions.plist

      - name: Upload Android artifacts
        if: matrix.platform == 'android'
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: |
            android/app/build/outputs/apk/release/*.apk
            android/app/build/outputs/bundle/release/*.aab

      - name: Upload iOS artifacts
        if: matrix.platform == 'ios'
        uses: actions/upload-artifact@v4
        with:
          name: ios-release
          path: |
            ios/*.ipa
            ios/App.xcarchive

  # Deploy to Google Play Store
  deploy-android:
    name: Deploy to Google Play Store
    runs-on: ubuntu-latest
    needs: build-mobile
    if: contains(github.event.inputs.platform, 'android') || github.event.inputs.platform == 'both' || github.event_name == 'push'
    environment: 
      name: mobile-production
      url: https://play.google.com/store/apps/details?id=com.twofastudio.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-release
          path: ./android-release

      - name: Upload to Google Play Store
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.twofastudio.app
          releaseFiles: android-release/app-release.aab
          track: production # or 'internal', 'alpha', 'beta'
          status: completed
          whatsNewDirectory: fastlane/metadata/android
          mappingFile: android-release/mapping.txt

      - name: Notify Android deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '📱 2FA Studio Android app deployed to Google Play Store'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Apple App Store
  deploy-ios:
    name: Deploy to Apple App Store
    runs-on: macos-latest
    needs: build-mobile
    if: contains(github.event.inputs.platform, 'ios') || github.event.inputs.platform == 'both' || github.event_name == 'push'
    environment: 
      name: mobile-production
      url: https://apps.apple.com/app/2fa-studio/id123456789
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-release
          path: ./ios-release

      - name: Upload to App Store Connect
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file ios-release/*.ipa \
            --username "${{ secrets.APPLE_ID_EMAIL }}" \
            --password "${{ secrets.APPLE_ID_PASSWORD }}" \
            --verbose

      - name: Submit for App Store Review (Optional)
        if: github.event.inputs.environment == 'production'
        run: |
          # Using App Store Connect API
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.APP_STORE_CONNECT_JWT }}" \
            -H "Content-Type: application/json" \
            -d '{"data":{"type":"appStoreVersionSubmissions","relationships":{"appStoreVersion":{"data":{"type":"appStoreVersions","id":"YOUR_VERSION_ID"}}}}}' \
            "https://api.appstoreconnect.apple.com/v1/appStoreVersionSubmissions"

      - name: Notify iOS deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '📱 2FA Studio iOS app uploaded to App Store Connect'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Firebase App Distribution (for beta testing)
  deploy-firebase-distribution:
    name: Deploy to Firebase App Distribution
    runs-on: ubuntu-latest
    needs: build-mobile
    if: github.event.inputs.environment == 'staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./mobile-releases

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Firebase
        run: echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" | firebase auth:import --key-file -

      - name: Upload Android to Firebase App Distribution
        if: hashFiles('mobile-releases/android-release/*.apk') != ''
        run: |
          firebase appdistribution:distribute \
            mobile-releases/android-release/app-release.apk \
            --app ${{ secrets.FIREBASE_ANDROID_APP_ID }} \
            --groups "qa-team, beta-testers" \
            --release-notes "Beta build from commit ${{ github.sha }}"

      - name: Upload iOS to Firebase App Distribution
        if: hashFiles('mobile-releases/ios-release/*.ipa') != ''
        run: |
          firebase appdistribution:distribute \
            mobile-releases/ios-release/*.ipa \
            --app ${{ secrets.FIREBASE_IOS_APP_ID }} \
            --groups "qa-team, beta-testers" \
            --release-notes "Beta build from commit ${{ github.sha }}"

  # Create mobile release
  create-mobile-release:
    name: Create Mobile Release
    runs-on: ubuntu-latest
    needs: [deploy-android, deploy-ios]
    if: always() && (needs.deploy-android.result == 'success' || needs.deploy-ios.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./mobile-releases

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Mobile Release ${{ github.ref_name }}
          files: |
            mobile-releases/android-release/*
            mobile-releases/ios-release/*
          body: |
            📱 Mobile App Release ${{ github.ref_name }}
            
            ## Platforms Deployed
            ${{ needs.deploy-android.result == 'success' && '- ✅ Android (Google Play Store)' || '- ❌ Android deployment failed' }}
            ${{ needs.deploy-ios.result == 'success' && '- ✅ iOS (Apple App Store)' || '- ❌ iOS deployment failed' }}
            
            ## Build Information
            - Commit: ${{ github.sha }}
            - Build Time: ${{ github.event.head_commit.timestamp }}
            - Environment: ${{ github.event.inputs.environment || 'production' }}
            
            ## Download Links
            - [Google Play Store](https://play.google.com/store/apps/details?id=com.twofastudio.app)
            - [Apple App Store](https://apps.apple.com/app/2fa-studio/id123456789)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Final deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            📱 2FA Studio Mobile Deployment Complete!
            
            Android: ${{ needs.deploy-android.result == 'success' && '✅ Deployed' || '❌ Failed' }}
            iOS: ${{ needs.deploy-ios.result == 'success' && '✅ Deployed' || '❌ Failed' }}
            
            Version: ${{ github.ref_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}