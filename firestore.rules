rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasValidSubscription() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscription.status == 'active';
    }
    
    function canAddAccount() {
      let userDoc = exists(/databases/$(database)/documents/users/$(request.auth.uid)) 
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data 
        : null;
      
      // If user document doesn't exist yet, allow (for initial setup)
      return userDoc == null || 
        userDoc.subscription.accountLimit == null || 
        !('accountCount' in userDoc) || 
        userDoc.accountCount < userDoc.subscription.accountLimit;
    }
    
    // User document rules
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && 
        // Ensure required fields are present
        request.resource.data.keys().hasAll(['email', 'subscription', 'settings']) &&
        // Ensure subscription is set to free tier for new users
        request.resource.data.subscription.tier == 'free';
      allow update: if isOwner(userId) && 
        // Prevent users from modifying their subscription unless they're updating from initial setup
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['subscription']) ||
         (resource.data.subscription == null && request.resource.data.subscription.tier == 'free'));
      allow delete: if false; // Users cannot delete their account through client
      
      // User's devices subcollection
      match /devices/{deviceId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
      
      // User's accounts (2FA) subcollection
      match /accounts/{accountId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && canAddAccount();
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
      
      // User's sessions subcollection
      match /sessions/{sessionId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
      
      // User's backups subcollection
      match /backups/{backupId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && hasValidSubscription();
        allow update: if false; // Backups are immutable
        allow delete: if isOwner(userId);
      }
      
      // User's usage analytics subcollection
      match /usage/{usageId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false; // Usage records are immutable
        allow delete: if isOwner(userId); // Allow cleanup of old data
      }
      
      // User's backup schedules subcollection
      match /backupSchedules/{scheduleId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
      
      // User's backup history subcollection
      match /backupHistory/{historyId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false; // History records are immutable
        allow delete: if isOwner(userId);
      }
    }
    
    // Admin access rules
    match /admin/{document=**} {
      allow read, write: if isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // Feature flags (read-only for authenticated users)
    match /features/{featureId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can modify
    }
    
    // App configuration (read-only for all users)
    match /config/{configId} {
      allow read: if true;
      allow write: if false; // Only server can modify
    }
    
    // Audit logs (write-only from client, read requires admin)
    match /audit/{logId} {
      allow read: if isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // Subscription plans (read-only)
    match /plans/{planId} {
      allow read: if true;
      allow write: if false; // Only server can modify
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}